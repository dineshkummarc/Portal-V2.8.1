//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Portal.Modules.Forum.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class UserBlogData : DataSet {
        
        private UserBlogDataTable tableUserBlog;
        
        public UserBlogData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected UserBlogData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserBlog"] != null)) {
                    this.Tables.Add(new UserBlogDataTable(ds.Tables["UserBlog"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserBlogDataTable UserBlog {
            get {
                return this.tableUserBlog;
            }
        }
        
        public override DataSet Clone() {
            UserBlogData cln = ((UserBlogData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserBlog"] != null)) {
                this.Tables.Add(new UserBlogDataTable(ds.Tables["UserBlog"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tableUserBlog = ((UserBlogDataTable)(this.Tables["UserBlog"]));
            if ((this.tableUserBlog != null)) {
                this.tableUserBlog.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "UserBlog";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UserBlogData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUserBlog = new UserBlogDataTable();
            this.Tables.Add(this.tableUserBlog);
        }
        
        private bool ShouldSerializeUserBlog() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserBlogRowChangeEventHandler(object sender, UserBlogRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserBlogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDateTime;
            
            private DataColumn columnTitle;
            
            private DataColumn columnText;
            
            public UserBlogDataTable() : 
                    base("UserBlog") {
                this.InitClass();
            }
            
            public UserBlogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn DateTimeColumn {
                get {
                    return this.columnDateTime;
                }
            }
            
            public DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            public DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            public UserBlogRow this[int index] {
                get {
                    return ((UserBlogRow)(this.Rows[index]));
                }
            }
            
            public event UserBlogRowChangeEventHandler UserBlogRowChanged;
            
            public event UserBlogRowChangeEventHandler UserBlogRowChanging;
            
            public event UserBlogRowChangeEventHandler UserBlogRowDeleted;
            
            public event UserBlogRowChangeEventHandler UserBlogRowDeleting;
            
            public void AddUserBlogRow(UserBlogRow row) {
                this.Rows.Add(row);
            }
            
            public UserBlogRow AddUserBlogRow(System.DateTime DateTime, string Title, string Text) {
                UserBlogRow rowUserBlogRow = ((UserBlogRow)(this.NewRow()));
                rowUserBlogRow.ItemArray = new object[] {
                        DateTime,
                        Title,
                        Text};
                this.Rows.Add(rowUserBlogRow);
                return rowUserBlogRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserBlogDataTable cln = ((UserBlogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserBlogDataTable();
            }
            
            public void InitVars() {
                this.columnDateTime = this.Columns["DateTime"];
                this.columnTitle = this.Columns["Title"];
                this.columnText = this.Columns["Text"];
            }
            
            private void InitClass() {
                this.columnDateTime = new DataColumn("DateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateTime);
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
            }
            
            public UserBlogRow NewUserBlogRow() {
                return ((UserBlogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserBlogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserBlogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserBlogRowChanged != null)) {
                    this.UserBlogRowChanged(this, new UserBlogRowChangeEvent(((UserBlogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserBlogRowChanging != null)) {
                    this.UserBlogRowChanging(this, new UserBlogRowChangeEvent(((UserBlogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserBlogRowDeleted != null)) {
                    this.UserBlogRowDeleted(this, new UserBlogRowChangeEvent(((UserBlogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserBlogRowDeleting != null)) {
                    this.UserBlogRowDeleting(this, new UserBlogRowChangeEvent(((UserBlogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserBlogRow(UserBlogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserBlogRow : DataRow {
            
            private UserBlogDataTable tableUserBlog;
            
            public UserBlogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserBlog = ((UserBlogDataTable)(this.Table));
            }
            
            public System.DateTime DateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUserBlog.DateTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableUserBlog.DateTimeColumn] = value;
                }
            }
            
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableUserBlog.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableUserBlog.TitleColumn] = value;
                }
            }
            
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableUserBlog.TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableUserBlog.TextColumn] = value;
                }
            }
            
            public bool IsDateTimeNull() {
                return this.IsNull(this.tableUserBlog.DateTimeColumn);
            }
            
            public void SetDateTimeNull() {
                this[this.tableUserBlog.DateTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTitleNull() {
                return this.IsNull(this.tableUserBlog.TitleColumn);
            }
            
            public void SetTitleNull() {
                this[this.tableUserBlog.TitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsTextNull() {
                return this.IsNull(this.tableUserBlog.TextColumn);
            }
            
            public void SetTextNull() {
                this[this.tableUserBlog.TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserBlogRowChangeEvent : EventArgs {
            
            private UserBlogRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserBlogRowChangeEvent(UserBlogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserBlogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
