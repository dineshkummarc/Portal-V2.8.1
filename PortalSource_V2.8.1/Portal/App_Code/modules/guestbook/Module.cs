//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Portal.Modules.Guestbook {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Module : DataSet {
        
        private GuestbookDataTable tableGuestbook;
        
        public Module() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Module(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Guestbook"] != null)) {
                    this.Tables.Add(new GuestbookDataTable(ds.Tables["Guestbook"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GuestbookDataTable Guestbook {
            get {
                return this.tableGuestbook;
            }
        }
        
        public override DataSet Clone() {
            Module cln = ((Module)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Guestbook"] != null)) {
                this.Tables.Add(new GuestbookDataTable(ds.Tables["Guestbook"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tableGuestbook = ((GuestbookDataTable)(this.Tables["Guestbook"]));
            if ((this.tableGuestbook != null)) {
                this.tableGuestbook.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Module";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Module.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGuestbook = new GuestbookDataTable();
            this.Tables.Add(this.tableGuestbook);
        }
        
        private bool ShouldSerializeGuestbook() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GuestbookRowChangeEventHandler(object sender, GuestbookRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GuestbookDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseEmail;
            
            private DataColumn columnUseUrl;
            
            private DataColumn columnEmailFrom;
            
            private DataColumn columnEmailTo;
            
            private DataColumn columnEmailSubject;
            
            private DataColumn columnEmailServer;
            
            private DataColumn columnSendNotification;
            
            private DataColumn columnEmailUserName;
            
            private DataColumn columnEmailPassword;
            
            private DataColumn columnUseAuthentication;
            
            public GuestbookDataTable() : 
                    base("Guestbook") {
                this.InitClass();
            }
            
            public GuestbookDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn UseEmailColumn {
                get {
                    return this.columnUseEmail;
                }
            }
            
            public DataColumn UseUrlColumn {
                get {
                    return this.columnUseUrl;
                }
            }
            
            public DataColumn EmailFromColumn {
                get {
                    return this.columnEmailFrom;
                }
            }
            
            public DataColumn EmailToColumn {
                get {
                    return this.columnEmailTo;
                }
            }
            
            public DataColumn EmailSubjectColumn {
                get {
                    return this.columnEmailSubject;
                }
            }
            
            public DataColumn EmailServerColumn {
                get {
                    return this.columnEmailServer;
                }
            }
            
            public DataColumn SendNotificationColumn {
                get {
                    return this.columnSendNotification;
                }
            }
            
            public DataColumn EmailUserNameColumn {
                get {
                    return this.columnEmailUserName;
                }
            }
            
            public DataColumn EmailPasswordColumn {
                get {
                    return this.columnEmailPassword;
                }
            }
            
            public DataColumn UseAuthenticationColumn {
                get {
                    return this.columnUseAuthentication;
                }
            }
            
            public GuestbookRow this[int index] {
                get {
                    return ((GuestbookRow)(this.Rows[index]));
                }
            }
            
            public event GuestbookRowChangeEventHandler GuestbookRowChanged;
            
            public event GuestbookRowChangeEventHandler GuestbookRowChanging;
            
            public event GuestbookRowChangeEventHandler GuestbookRowDeleted;
            
            public event GuestbookRowChangeEventHandler GuestbookRowDeleting;
            
            public void AddGuestbookRow(GuestbookRow row) {
                this.Rows.Add(row);
            }
            
            public GuestbookRow AddGuestbookRow(bool UseEmail, bool UseUrl, string EmailFrom, string EmailTo, string EmailSubject, string EmailServer, bool SendNotification, string EmailUserName, string EmailPassword, bool UseAuthentication) {
                GuestbookRow rowGuestbookRow = ((GuestbookRow)(this.NewRow()));
                rowGuestbookRow.ItemArray = new object[] {
                        UseEmail,
                        UseUrl,
                        EmailFrom,
                        EmailTo,
                        EmailSubject,
                        EmailServer,
                        SendNotification,
                        EmailUserName,
                        EmailPassword,
                        UseAuthentication};
                this.Rows.Add(rowGuestbookRow);
                return rowGuestbookRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GuestbookDataTable cln = ((GuestbookDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GuestbookDataTable();
            }
            
            public void InitVars() {
                this.columnUseEmail = this.Columns["UseEmail"];
                this.columnUseUrl = this.Columns["UseUrl"];
                this.columnEmailFrom = this.Columns["EmailFrom"];
                this.columnEmailTo = this.Columns["EmailTo"];
                this.columnEmailSubject = this.Columns["EmailSubject"];
                this.columnEmailServer = this.Columns["EmailServer"];
                this.columnSendNotification = this.Columns["SendNotification"];
                this.columnEmailUserName = this.Columns["EmailUserName"];
                this.columnEmailPassword = this.Columns["EmailPassword"];
                this.columnUseAuthentication = this.Columns["UseAuthentication"];
            }
            
            private void InitClass() {
                this.columnUseEmail = new DataColumn("UseEmail", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseEmail);
                this.columnUseUrl = new DataColumn("UseUrl", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseUrl);
                this.columnEmailFrom = new DataColumn("EmailFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailFrom);
                this.columnEmailTo = new DataColumn("EmailTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailTo);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailSubject);
                this.columnEmailServer = new DataColumn("EmailServer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailServer);
                this.columnSendNotification = new DataColumn("SendNotification", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSendNotification);
                this.columnEmailUserName = new DataColumn("EmailUserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailUserName);
                this.columnEmailPassword = new DataColumn("EmailPassword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailPassword);
                this.columnUseAuthentication = new DataColumn("UseAuthentication", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseAuthentication);
                this.columnUseEmail.AllowDBNull = false;
                this.columnEmailTo.AllowDBNull = false;
            }
            
            public GuestbookRow NewGuestbookRow() {
                return ((GuestbookRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GuestbookRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GuestbookRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GuestbookRowChanged != null)) {
                    this.GuestbookRowChanged(this, new GuestbookRowChangeEvent(((GuestbookRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GuestbookRowChanging != null)) {
                    this.GuestbookRowChanging(this, new GuestbookRowChangeEvent(((GuestbookRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GuestbookRowDeleted != null)) {
                    this.GuestbookRowDeleted(this, new GuestbookRowChangeEvent(((GuestbookRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GuestbookRowDeleting != null)) {
                    this.GuestbookRowDeleting(this, new GuestbookRowChangeEvent(((GuestbookRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGuestbookRow(GuestbookRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GuestbookRow : DataRow {
            
            private GuestbookDataTable tableGuestbook;
            
            public GuestbookRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGuestbook = ((GuestbookDataTable)(this.Table));
            }
            
            public bool UseEmail {
                get {
                    return ((bool)(this[this.tableGuestbook.UseEmailColumn]));
                }
                set {
                    this[this.tableGuestbook.UseEmailColumn] = value;
                }
            }
            
            public bool UseUrl {
                get {
                    try {
                        return ((bool)(this[this.tableGuestbook.UseUrlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.UseUrlColumn] = value;
                }
            }
            
            public string EmailFrom {
                get {
                    try {
                        return ((string)(this[this.tableGuestbook.EmailFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.EmailFromColumn] = value;
                }
            }
            
            public string EmailTo {
                get {
                    return ((string)(this[this.tableGuestbook.EmailToColumn]));
                }
                set {
                    this[this.tableGuestbook.EmailToColumn] = value;
                }
            }
            
            public string EmailSubject {
                get {
                    try {
                        return ((string)(this[this.tableGuestbook.EmailSubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.EmailSubjectColumn] = value;
                }
            }
            
            public string EmailServer {
                get {
                    try {
                        return ((string)(this[this.tableGuestbook.EmailServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.EmailServerColumn] = value;
                }
            }
            
            public bool SendNotification {
                get {
                    try {
                        return ((bool)(this[this.tableGuestbook.SendNotificationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.SendNotificationColumn] = value;
                }
            }
            
            public string EmailUserName {
                get {
                    try {
                        return ((string)(this[this.tableGuestbook.EmailUserNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.EmailUserNameColumn] = value;
                }
            }
            
            public string EmailPassword {
                get {
                    try {
                        return ((string)(this[this.tableGuestbook.EmailPasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.EmailPasswordColumn] = value;
                }
            }
            
            public bool UseAuthentication {
                get {
                    try {
                        return ((bool)(this[this.tableGuestbook.UseAuthenticationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableGuestbook.UseAuthenticationColumn] = value;
                }
            }
            
            public bool IsUseUrlNull() {
                return this.IsNull(this.tableGuestbook.UseUrlColumn);
            }
            
            public void SetUseUrlNull() {
                this[this.tableGuestbook.UseUrlColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailFromNull() {
                return this.IsNull(this.tableGuestbook.EmailFromColumn);
            }
            
            public void SetEmailFromNull() {
                this[this.tableGuestbook.EmailFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailSubjectNull() {
                return this.IsNull(this.tableGuestbook.EmailSubjectColumn);
            }
            
            public void SetEmailSubjectNull() {
                this[this.tableGuestbook.EmailSubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailServerNull() {
                return this.IsNull(this.tableGuestbook.EmailServerColumn);
            }
            
            public void SetEmailServerNull() {
                this[this.tableGuestbook.EmailServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsSendNotificationNull() {
                return this.IsNull(this.tableGuestbook.SendNotificationColumn);
            }
            
            public void SetSendNotificationNull() {
                this[this.tableGuestbook.SendNotificationColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailUserNameNull() {
                return this.IsNull(this.tableGuestbook.EmailUserNameColumn);
            }
            
            public void SetEmailUserNameNull() {
                this[this.tableGuestbook.EmailUserNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailPasswordNull() {
                return this.IsNull(this.tableGuestbook.EmailPasswordColumn);
            }
            
            public void SetEmailPasswordNull() {
                this[this.tableGuestbook.EmailPasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseAuthenticationNull() {
                return this.IsNull(this.tableGuestbook.UseAuthenticationColumn);
            }
            
            public void SetUseAuthenticationNull() {
                this[this.tableGuestbook.UseAuthenticationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GuestbookRowChangeEvent : EventArgs {
            
            private GuestbookRow eventRow;
            
            private DataRowAction eventAction;
            
            public GuestbookRowChangeEvent(GuestbookRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GuestbookRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
