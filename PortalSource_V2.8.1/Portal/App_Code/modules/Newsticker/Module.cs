//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Portal.Modules.Newsticker {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Module : DataSet {
        
        private newsDataTable tablenews;
        
        public Module() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Module(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["news"] != null)) {
                    this.Tables.Add(new newsDataTable(ds.Tables["news"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public newsDataTable news {
            get {
                return this.tablenews;
            }
        }
        
        public override DataSet Clone() {
            Module cln = ((Module)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["news"] != null)) {
                this.Tables.Add(new newsDataTable(ds.Tables["news"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tablenews = ((newsDataTable)(this.Tables["news"]));
            if ((this.tablenews != null)) {
                this.tablenews.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Module";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Module.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablenews = new newsDataTable();
            this.Tables.Add(this.tablenews);
        }
        
        private bool ShouldSerializenews() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void newsRowChangeEventHandler(object sender, newsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class newsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUrl;
            
            private DataColumn columnName;
            
            private DataColumn columnMaxCount;
            
            public newsDataTable() : 
                    base("news") {
                this.InitClass();
            }
            
            public newsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public DataColumn MaxCountColumn {
                get {
                    return this.columnMaxCount;
                }
            }
            
            public newsRow this[int index] {
                get {
                    return ((newsRow)(this.Rows[index]));
                }
            }
            
            public event newsRowChangeEventHandler newsRowChanged;
            
            public event newsRowChangeEventHandler newsRowChanging;
            
            public event newsRowChangeEventHandler newsRowDeleted;
            
            public event newsRowChangeEventHandler newsRowDeleting;
            
            public void AddnewsRow(newsRow row) {
                this.Rows.Add(row);
            }
            
            public newsRow AddnewsRow(string Url, string Name, int MaxCount) {
                newsRow rownewsRow = ((newsRow)(this.NewRow()));
                rownewsRow.ItemArray = new object[] {
                        Url,
                        Name,
                        MaxCount};
                this.Rows.Add(rownewsRow);
                return rownewsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                newsDataTable cln = ((newsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new newsDataTable();
            }
            
            public void InitVars() {
                this.columnUrl = this.Columns["Url"];
                this.columnName = this.Columns["Name"];
                this.columnMaxCount = this.Columns["MaxCount"];
            }
            
            private void InitClass() {
                this.columnUrl = new DataColumn("Url", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUrl);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnMaxCount = new DataColumn("MaxCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxCount);
            }
            
            public newsRow NewnewsRow() {
                return ((newsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new newsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(newsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.newsRowChanged != null)) {
                    this.newsRowChanged(this, new newsRowChangeEvent(((newsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.newsRowChanging != null)) {
                    this.newsRowChanging(this, new newsRowChangeEvent(((newsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.newsRowDeleted != null)) {
                    this.newsRowDeleted(this, new newsRowChangeEvent(((newsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.newsRowDeleting != null)) {
                    this.newsRowDeleting(this, new newsRowChangeEvent(((newsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovenewsRow(newsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class newsRow : DataRow {
            
            private newsDataTable tablenews;
            
            public newsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablenews = ((newsDataTable)(this.Table));
            }
            
            public string Url {
                get {
                    try {
                        return ((string)(this[this.tablenews.UrlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tablenews.UrlColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablenews.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tablenews.NameColumn] = value;
                }
            }
            
            public int MaxCount {
                get {
                    try {
                        return ((int)(this[this.tablenews.MaxCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tablenews.MaxCountColumn] = value;
                }
            }
            
            public bool IsUrlNull() {
                return this.IsNull(this.tablenews.UrlColumn);
            }
            
            public void SetUrlNull() {
                this[this.tablenews.UrlColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tablenews.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tablenews.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxCountNull() {
                return this.IsNull(this.tablenews.MaxCountColumn);
            }
            
            public void SetMaxCountNull() {
                this[this.tablenews.MaxCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class newsRowChangeEvent : EventArgs {
            
            private newsRow eventRow;
            
            private DataRowAction eventAction;
            
            public newsRowChangeEvent(newsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public newsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
